# Vue 3 + Vite AI开发规则

## 项目信息
- 框架: Vue 3 + Vite
- 语言: TypeScript
- 样式: CSS + 可选Tailwind CSS
- HTTP客户端: Axios
- 包管理: pnpm (强制要求)
- 推荐IDE插件: Volar

## 代码规范
1. 使用Vue 3 Composition API (<script setup>)
2. 使用TypeScript严格模式
3. 遵循单文件组件(SFC)最佳实践
4. 组件文件使用PascalCase命名
5. 工具函数使用camelCase命名
6. 接口类型使用PascalCase + 'Interface'后缀

## 组件开发规则
- 优先使用<script setup>语法
- 使用ref/reactive管理响应式数据
- 使用computed计算属性
- 使用watch/watchEffect侦听器
- 组件props必须定义类型
- 使用defineProps和defineEmits
- 合理使用slots
- 组件性能优化（shallowRef, computed缓存等）

## 响应式数据规则
1. 基本类型使用ref
2. 对象类型使用reactive
3. 复杂数据考虑使用shallowRef/shallowReactive
4. 计算属性使用computed
5. 侦听器使用watch/watchEffect

## 组件通信规则
1. Props父传子
2. Emits子传父
3. provide/inject跨层级通信
4. 事件总线（简单场景）
5. Pinia状态管理（复杂场景）

## API调用规则
1. 使用src/lib/api.ts中的HTTP客户端
2. 在src/lib/services.ts中定义API接口
3. 统一错误处理
4. 使用async/await语法
5. 考虑在Vue组件中的响应式处理

## 样式开发规则
1. 使用scoped样式避免污染
2. 合理使用CSS变量
3. 响应式设计优先
4. 考虑CSS模块化
5. 动画使用Vue Transition

## 文件结构规则
```
src/
├── components/     # 组件目录
├── lib/           # 工具库
├── composables/   # 组合式函数
├── types/         # 类型定义
├── utils/         # 工具函数
├── stores/        # Pinia状态管理
└── views/         # 页面组件
```

## 导入规则
1. 优先使用相对路径导入
2. 组件导入放在顶部
3. 第三方库导入在前，本地库导入在后
4. Vue相关导入集中管理
5. 避免循环导入

## 注释规范
1. 使用JSDoc风格注释
2. 复杂逻辑必须添加注释
3. API接口必须添加文档注释
4. 组件props和events必须说明
5. 组合式函数必须说明用途

## 性能优化规则
1. 使用shallowRef优化大对象
2. 合理使用computed缓存
3. 使用v-memo优化模板
4. 异步组件懒加载
5. 虚拟滚动长列表

## TypeScript规则
1. 严格类型检查
2. 为所有props定义类型
3. 为ref/reactive指定类型
4. 使用接口定义数据结构
5. 泛型使用要合理

## 生命周期规则
1. onMounted: 组件挂载后
2. onUnmounted: 组件卸载前
3. onUpdated: 组件更新后
4. 避免在watch中操作DOM
5. 清理副作用（定时器、事件监听等）

## Git提交规则
```
feat: 新功能
fix: 修复bug
docs: 文档更新
style: 代码格式化
refactor: 重构
test: 测试相关
chore: 构建过程或辅助工具的变动
```

## 包管理规则
1. 必须使用 pnpm 作为包管理器
2. 使用 pnpm workspace 协议引用内部依赖
3. 依赖安装: `pnpm install`
4. 开发服务器: `pnpm dev`
5. 构建: `pnpm build`

## AI开发提示
- 优先考虑Composition API
- 合理使用响应式数据
- 保持组件单一职责
- 遵循Vue 3最佳实践
- 考虑性能优化
- 保持代码风格一致
- 使用TypeScript提升代码质量
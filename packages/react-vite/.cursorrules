# React + Vite AI开发规则

## 项目信息
- 框架: React 18 + Vite
- 语言: TypeScript
- 样式: Tailwind CSS
- HTTP客户端: Axios
- 包管理: pnpm (强制要求)

## 代码规范
1. 使用TypeScript严格模式
2. 遵循React函数组件最佳实践
3. 使用Tailwind CSS进行样式设计
4. 组件文件使用PascalCase命名
5. 工具函数使用camelCase命名
6. 接口类型使用PascalCase + 'Interface'后缀

## 组件开发规则
- 优先使用函数组件
- 使用React Hooks管理状态
- 组件props必须定义类型
- 使用React.memo优化性能
- 合理拆分组件，保持单一职责

## 状态管理规则
1. 优先使用useState/useReducer
2. 全局状态使用Context API
3. 复杂状态考虑使用状态管理库
4. 避免不必要的状态提升

## API调用规则
1. 使用src/lib/api.ts中的HTTP客户端
2. 在src/lib/services.ts中定义API接口
3. 统一错误处理
4. 使用async/await语法

## 样式开发规则
1. 优先使用Tailwind CSS类
2. 自定义样式使用CSS Modules
3. 保持样式的一致性
4. 响应式设计优先

## 文件结构规则
```
src/
├── components/     # 组件目录
├── lib/           # 工具库
├── hooks/         # 自定义hooks
├── types/         # 类型定义
├── utils/         # 工具函数
└── pages/         # 页面组件
```

## 导入规则
1. 优先使用相对路径导入
2. 组件导入放在顶部
3. 第三方库导入在前，本地库导入在后
4. 避免循环导入

## 注释规范
1. 使用JSDoc风格注释
2. 复杂逻辑必须添加注释
3. API接口必须添加文档注释
4. 组件props必须说明用途

## 性能优化规则
1. 使用React.memo优化纯组件
2. 合理使用useCallback/useMemo
3. 避免不必要的重新渲染
4. 代码分割和懒加载

## 测试规则
1. 组件测试使用React Testing Library
2. API测试使用Jest + MSW
3. 保持测试覆盖率
4. 测试文件命名规范：*.test.tsx

## 包管理规则
1. 必须使用 pnpm 作为包管理器
2. 使用 pnpm workspace 协议引用内部依赖
3. 依赖安装: `pnpm install`
4. 开发服务器: `pnpm dev`
5. 构建: `pnpm build`

## Git提交规则
```
feat: 新功能
fix: 修复bug
docs: 文档更新
style: 代码格式化
refactor: 重构
test: 测试相关
chore: 构建过程或辅助工具的变动
```

## AI开发提示
- 优先考虑代码可读性和维护性
- 遵循项目现有架构和设计模式
- 适当添加代码注释
- 考虑性能和安全性
- 保持代码风格一致